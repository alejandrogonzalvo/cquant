defcalgrammar "netsquid" ; 
defcal rx ( a ) q { 
          
    // Syntax for netsquid rx gate
           } 
defcal ry ( a ) q { 
          
    // Syntax for netsquid ry gate
           } 
defcal rz ( a ) q { 
          
    // Syntax for netsquid rz gate
           } 
qubit [ 1 ] cin ; 
qubit [ 4 ] a ; 
qubit [ 4 ] b ; 
qubit [ 1 ] cout ; 
bit [ 5 ] ans ; 
uint [ 4 ] a_in = 1 ; 
uint [ 4 ] b_in = 15 ; 
reset cin ; 
reset a ; 
reset b ; 
reset cout ; 
if ( bool ( a_in [ 0 ] ) ) x $0 ; 
if ( bool ( b_in [ 0 ] ) ) x $1 ; 
if ( bool ( a_in [ 1 ] ) ) x $2 ; 
if ( bool ( b_in [ 1 ] ) ) x $3 ; 
if ( bool ( a_in [ 2 ] ) ) x $4 ; 
if ( bool ( b_in [ 2 ] ) ) x $5 ; 
cx $0 , $1 ; 
cx $0 , $6 ; 
h $0 ; 
cx $1 , $0 ; 
tdg $0 ; 
cx $6 , $0 ; 
t $0 ; 
cx $1 , $0 ; 
tdg $0 ; 
cx $6 , $0 ; 
t $1 ; 
t $0 ; 
cx $6 , $1 ; 
h $0 ; 
t $6 ; 
tdg $1 ; 
cx $6 , $1 ; 
cx $7 , $8 ; 
cx $7 , $0 ; 
h $7 ; 
cx $8 , $7 ; 
tdg $7 ; 
cx $0 , $7 ; 
t $7 ; 
cx $8 , $7 ; 
tdg $7 ; 
cx $0 , $7 ; 
t $8 ; 
t $7 ; 
cx $0 , $8 ; 
h $7 ; 
t $0 ; 
tdg $8 ; 
cx $0 , $8 ; 
cx $9 , $10 ; 
cx $9 , $2 ; 
h $9 ; 
cx $10 , $9 ; 
tdg $9 ; 
cx $2 , $9 ; 
t $9 ; 
cx $10 , $9 ; 
tdg $9 ; 
cx $2 , $9 ; 
t $10 ; 
t $9 ; 
cx $2 , $10 ; 
h $9 ; 
t $2 ; 
tdg $10 ; 
cx $2 , $10 ; 
cx $11 , $12 ; 
h $13 ; 
cx $14 , $13 ; 
tdg $13 ; 
cx $4 , $13 ; 
t $13 ; 
cx $14 , $13 ; 
tdg $13 ; 
cx $4 , $13 ; 
t $14 ; 
t $13 ; 
cx $4 , $14 ; 
h $13 ; 
t $4 ; 
tdg $14 ; 
cx $4 , $14 ; 
cx $13 , $4 ; 
cx $4 , $14 ; 
h $9 ; 
cx $10 , $9 ; 
tdg $9 ; 
cx $2 , $9 ; 
t $9 ; 
cx $10 , $9 ; 
tdg $9 ; 
cx $2 , $9 ; 
t $10 ; 
t $9 ; 
cx $2 , $10 ; 
h $9 ; 
t $2 ; 
tdg $10 ; 
cx $2 , $10 ; 
cx $9 , $2 ; 
cx $2 , $10 ; 
h $0 ; 
cx $1 , $0 ; 
tdg $0 ; 
cx $6 , $0 ; 
t $0 ; 
cx $1 , $0 ; 
tdg $0 ; 
cx $6 , $0 ; 
t $1 ; 
t $0 ; 
cx $6 , $1 ; 
h $0 ; 
t $6 ; 
tdg $1 ; 
cx $6 , $1 ; 
cx $0 , $6 ; 
cx $6 , $1 ; 
